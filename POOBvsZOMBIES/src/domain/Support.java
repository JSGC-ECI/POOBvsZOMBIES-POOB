package domain;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
 * The Support class is an abstract extension of the Plant class, designed to represent
 * a type of plant in the game that generates sunlight at regular intervals. This sunlight
 * can be collected and used as a resource for deploying additional plants or performing
 * other actions within the game. Support plants provide strategic support by continuously
 * contributing resources while remaining in the game.
 */
public abstract class Support extends Plant{
    public int sunValue;
    public int time;
    private ScheduledExecutorService scheduler;

    /**
     * Constructs a Support object which is a type of plant that can generate sunlight
     * at specified intervals during gameplay. This constructor initializes the plant's
     * hit points, sun cost, sun generation value, and time interval for sunlight production.
     *
     * @param hitPoints the initial number of hit points for the support plant.
     * @param costSun the amount of sun required to deploy the support plant.
     * @param sunValue the value of sun generated by the plant at each interval.
     * @param time the interval in seconds at which the plant generates sun.
     */
    public Support(int hitPoints, int costSun, int sunValue, int time) {
        super(hitPoints, costSun);
        this.sunValue = sunValue;
        this.time = time * 1000;
        generateSun();
    }

    /**
     * Retrieves the sun value generated by the support plant.
     *
     * @return the sun value generated by the plant.
     */
    public int getSunValue() {
        return sunValue;
    }

    public double getTime() {
        return time;
    }

    /**
     * Initiates the generation of sunlight at fixed intervals. This method schedules
     * a recurring task that generates and adds a specified amount of sunlight to the
     * game's resources at regular time intervals defined by the 'time' parameter.
     * The sunlight is generated and added to the game resources starting immediately
     * with no initial delay. The amount of sunlight generated is determined by the
     * sun value of the support plant.
     *
     * The method utilizes a single-threaded scheduled executor service to manage
     * the timing of the sunlight generation task. The executor schedules the task
     * to run with a fixed delay between successive executions, ensuring that sunlight
     * is generated consistently throughout the lifecycle of the support plant.
     *
     * This method is automatically called during the construction of a Support instance
     * and establishes the continuous generation of resources until it is explicitly
     * stopped by methods such as stopGeneratingSun.
     */
    public void generateSun() {
        scheduler = Executors.newSingleThreadScheduledExecutor();
        scheduler.scheduleAtFixedRate(() -> {
            GameManager.getInstance().collectSun(getSunValue());
            System.out.println("Generando " + getSunValue() + " soles...");
        }, 0, time, TimeUnit.MILLISECONDS);
    }

    /**
     * Stops the generation of sunlight by shutting down the scheduled executor service
     * responsible for periodically adding sunlight resources to the game. If the scheduler
     * is not null, this method will terminate its operations, effectively halting any
     * ongoing or future sunlight generation tasks. This is typically used to stop the
     * automatic generation of sunlight when it is no longer needed, such as when the support
     * plant is removed from the game or its functionality is otherwise disabled.
     */
    public void stopGeneratingSun() {
        if (scheduler != null) {
            scheduler.shutdown();
        }
    }
}

